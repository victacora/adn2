{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/createCompany/createCompany.component.ts","webpack:///./src/app/createCompany/createcompany.component.css","webpack:///./src/app/createCompany/createcompany.component.html","webpack:///./src/app/createcompany/createcompany.component.css","webpack:///./src/app/createcompany/createcompany.component.html","webpack:///./src/app/createcompany/createcompany.component.ts","webpack:///./src/app/dialog/dialog.component.css","webpack:///./src/app/dialog/dialog.component.html","webpack:///./src/app/dialog/dialog.component.ts","webpack:///./src/app/listCompany/listCompany.component.ts","webpack:///./src/app/listCompany/listcompany.component.css","webpack:///./src/app/listCompany/listcompany.component.html","webpack:///./src/app/model/company.ts","webpack:///./src/app/service/companies.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".panelregistroingreso {\\n\\t\\n}\\n\\n.panellistadovehiculos {\\n\\t\\n}\\n\\n.panelregistrosalida {\\n\\t\\n}\\n\\n.contenedor {\\n\\theight: 100%;\\n}\\n\\n\"","module.exports = \"\\n<div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\n\\t<app-createcompany fxFlex=\\\"20%\\\"\\n\\t\\t(reload)=\\\"reloadCompanies()\\\"></app-createcompany>\\n\\t<app-listcompany fxFlex=\\\"60%\\\"></app-listcompany>\\n</div>\"","import { Component, ViewChild } from '@angular/core';\nimport { CreateCompanyComponent } from './createCompany/createCompany.component';\nimport { ListCompanyComponent } from './listCompany/listCompany.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'Companies';\n\n  @ViewChild(CreateCompanyComponent) private createCompanyComp:\n    CreateCompanyComponent;\n\n  @ViewChild(ListCompanyComponent) private listCompaniesComp:\n  ListCompanyComponent;\n\n  public reloadCompanies() {\n    this.listCompaniesComp.reloadCompanies();\n  }\n\n\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MatProgressSpinnerModule, MatCardModule, MatToolbarModule, MatFormFieldModule, MatInputModule, MatButtonModule,\n  MatSidenavModule, MatIconModule, MatListModule, MatDialogModule, MatTableModule, MatPaginatorModule, MatSortModule\n} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CreateCompanyComponent} from './createcompany/createcompany.component';\nimport {DialogoComponent as DialogComponent} from './dialog/dialog.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { ListCompanyComponent } from './listCompany/listCompany.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateCompanyComponent,\n    ListCompanyComponent,\n    DialogComponent\n  ],\n  entryComponents: [DialogComponent],\n  imports: [\n    MatProgressSpinnerModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FlexLayoutModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    HttpClientModule\n  ],\n  exports: [\n    MatProgressSpinnerModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FlexLayoutModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { DialogoComponent } from '../dialog/dialog.component';\nimport { Component, Output, EventEmitter, ViewChild,  AfterViewInit } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { CompaniesService } from '../service/companies.service';\nimport { Company } from '../model/company';\n\n@Component({\n  selector: 'app-createcompany',\n  templateUrl: './createcompany.component.html',\n  styleUrls: ['./createcompany.component.css']\n})\nexport class CreateCompanyComponent implements AfterViewInit {\n\n  private company: Company;\n\n  @ViewChild('createcompanyfrm') createcompanyfrm;\n\n  @Output() public reload = new EventEmitter();\n\n  constructor(private dialog: MatDialog, private companiesService: CompaniesService) { }\n\n ngAfterViewInit() {\n    this.company = new Company();\n  }\n\n  createCompany() {\n    this.companiesService.createCompanies(this.company).subscribe(() => {\n      this.dialog.open(DialogoComponent, {\n        data: {\n          title: 'Informacion',\n          message: 'Entrada registrada correctamente.'\n        }\n      });\n      this.reload.emit();\n      this.company = new Company();\n    }, (error) => {\n      this.dialog.open(DialogoComponent, {\n        data: {\n          title: 'Error',\n          message: error.error.message\n        }\n      });\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"\\n<mat-card> <mat-card-header> <mat-card-title>\\n<h1>Crear empresa</h1>\\n</mat-card-title> </mat-card-header> <mat-card-content>\\n<form class=\\\"createcompany\\\" #createcompanyfrm=\\\"ngForm\\\">\\n\\t<div fxLayout=\\\"column\\\">\\n\\t\\t<label>NIT</label>\\n\\t\\t<mat-form-field> <input name=\\\"nit\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.nit\\\" placeholder=\\\"Numero de indentificacion de la empresa\\\" required>\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Razon social</label>\\n\\t\\t<mat-form-field> <input name=\\\"name\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.name\\\" placeholder=\\\"Razon social de la empresa\\\" required>\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Numero telefonico</label>\\n\\t\\t<mat-form-field> <input name=\\\"phone_number\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.phone_number\\\" placeholder=\\\"Numero telefonico de la empresa\\\">\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Correo electronico</label>\\n\\t\\t<mat-form-field> <input name=\\\"email\\\" matInput \\n\\t\\t\\t[(ngModel)]=\\\"company.email\\\" type=\\\"email\\\" placeholder=\\\"Correo electronico\\\">\\n\\t\\t</mat-form-field>\\n\\t</div>\\n</form>\\n</mat-card-content> <mat-card-actions align=\\\"end\\\">\\n<button mat-raised-button (click)=\\\"createCompany()\\\" color=\\\"primary\\\">Crear</button>\\n</mat-card-actions> </mat-card>\\n\"","module.exports = \"\"","module.exports = \"\\n<mat-card> <mat-card-header> <mat-card-title>\\n<h1>Crear empresa</h1>\\n</mat-card-title> </mat-card-header> <mat-card-content>\\n<form class=\\\"createcompany\\\" #createcompanyfrm=\\\"ngForm\\\">\\n\\t<div fxLayout=\\\"column\\\">\\n\\t\\t<label>NIT</label>\\n\\t\\t<mat-form-field> <input name=\\\"nit\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.nit\\\" placeholder=\\\"Numero de indentificacion de la empresa\\\" required>\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Razon social</label>\\n\\t\\t<mat-form-field> <input name=\\\"name\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.name\\\" placeholder=\\\"Razon social de la empresa\\\" required>\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Numero telefonico</label>\\n\\t\\t<mat-form-field> <input name=\\\"phone_number\\\" matInput\\n\\t\\t\\t[(ngModel)]=\\\"company.phone_number\\\" placeholder=\\\"Numero telefonico de la empresa\\\">\\n\\t\\t</mat-form-field>\\n\\t\\t<label>Correo electronico</label>\\n\\t\\t<mat-form-field> <input name=\\\"email\\\" matInput \\n\\t\\t\\t[(ngModel)]=\\\"company.email\\\" type=\\\"email\\\" placeholder=\\\"Correo electronico\\\">\\n\\t\\t</mat-form-field>\\n\\t</div>\\n</form>\\n</mat-card-content> <mat-card-actions align=\\\"end\\\">\\n<button mat-raised-button (click)=\\\"createCompany()\\\" color=\\\"primary\\\">Crear</button>\\n</mat-card-actions> </mat-card>\\n\"","import { DialogoComponent } from '../dialog/dialog.component';\nimport { Component, Output, EventEmitter, ViewChild,  AfterViewInit } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { CompaniesService } from '../service/companies.service';\nimport { Company } from '../model/company';\n\n@Component({\n  selector: 'app-createcompany',\n  templateUrl: './createcompany.component.html',\n  styleUrls: ['./createcompany.component.css']\n})\nexport class CreateCompanyComponent implements AfterViewInit {\n\n  private company: Company;\n\n  @ViewChild('createcompanyfrm') createcompanyfrm;\n\n  @Output() public reload = new EventEmitter();\n\n  constructor(private dialog: MatDialog, private companiesService: CompaniesService) { }\n\n ngAfterViewInit() {\n    this.company = new Company();\n  }\n\n  createCompany() {\n    this.companiesService.createCompanies(this.company).subscribe(() => {\n      this.dialog.open(DialogoComponent, {\n        data: {\n          title: 'Informacion',\n          message: 'Entrada registrada correctamente.'\n        }\n      });\n      this.reload.emit();\n      this.company = new Company();\n    }, (error) => {\n      this.dialog.open(DialogoComponent, {\n        data: {\n          title: 'Error',\n          message: error.error.message\n        }\n      });\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>{{data.title}}</h2>\\n<mat-dialog-content class>{{data.message}}</mat-dialog-content>\\n<mat-dialog-actions>\\n<button mat-raised-button (click)=\\\"closeDialog()\\\">Aceptar</button>\\n</mat-dialog-actions>\"","import {Component, Inject} from '@angular/core';\nimport {MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.css']\n})\nexport class DialogoComponent {\n\n  constructor(private dialogRef: MatDialogRef<DialogoComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  public closeDialog() {\n    this.dialogRef.close();\n  }\n\n}\n","import { Company } from '../model/company';\nimport { Component, ViewChild, AfterViewInit } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { CompaniesService } from '../service/companies.service';\n\n@Component({\n  selector: 'app-listcompany',\n  templateUrl: './listcompany.component.html',\n  styleUrls: ['./listcompany.component.css']\n})\n\nexport class ListCompanyComponent implements AfterViewInit {\n\n  loading = true;\n  companies: Company[] = [];\n\n  columsList = ['id', 'nit', 'name', 'phone_number', 'email'];\n\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private companiesService: CompaniesService) { }\n\n  ngAfterViewInit() {\n    this.reloadCompanies();\n  }\n\n  public reloadCompanies() {\n      this.loading = true;\n     this.companiesService.listCompanies().subscribe(data => this.companies = data);\n  }\n\n}\n","module.exports = \".container {\\n\\tposition: relative;\\n}\\n\\n.table-container {\\n\\tposition: relative;\\n\\tmax-height: 400px;\\n\\toverflow: auto;\\n}\\n\\ntable {\\n\\twidth: 100%;\\n}\\n\\n.loading-shade {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tbottom: 56px;\\n\\tright: 0;\\n\\tbackground: rgba(0, 0, 0, 0.15);\\n\\tz-index: 1;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n}\"","module.exports = \"<div class=\\\"container mat-elevation-z8\\\">\\n\\t<div class=\\\"loading-shade\\\" *ngIf=\\\"loading\\\">\\n\\t\\t<mat-spinner *ngIf=\\\"loading\\\"></mat-spinner>\\n\\t</div>\\n\\n\\t<mat-card>\\n\\t\\t<mat-card-header>\\n\\t\\t\\t<mat-card-title>\\n\\t\\t\\t\\t<h1>Listado de empresas</h1>\\n\\t\\t\\t</mat-card-title>\\n\\t\\t</mat-card-header>\\n\\t\\t<mat-card-content>\\n\\t\\t\\t<mat-table class=\\\"table\\\" [dataSource]=\\\"companies\\\">\\n\\t\\t\\t\\t<mat-header-row *matHeaderRowDef=\\\"columnsList\\\"></mat-header-row>\\n\\t\\t\\t\\t<mat-row *matRowDef=\\\"let row; columns: columnsList;\\\"></mat-row>\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"id\\\">\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef > Id </mat-header-cell>\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </mat-cell>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"nit\\\">\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> NIT </mat-header-cell>\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.nit}} </mat-cell>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"name\\\">\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </mat-cell>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"phone_number\\\">\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Telefono </mat-header-cell>\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\"> {{element.phone_number}} </mat-cell>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t<ng-container matColumnDef=\\\"email\\\">\\n\\t\\t\\t\\t\\t<mat-header-cell *matHeaderCellDef mat-sort-header> Email </mat-header-cell>\\n\\t\\t\\t\\t\\t<mat-cell *matCellDef=\\\"let element\\\">{{element.email}}</mat-cell>\\n\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t</mat-table>\\n\\t\\t</mat-card-content>\\n\\t</mat-card>\\n</div>\"","export class Company {\n  id: number;\n  name: string;\n  nit: string;\n  email: number;\n  phone_number: string;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Company } from '../model/company';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompaniesService {\n\n  API_URL = 'http://localhost:9000/api/v1/companies';\n\n  constructor(private httpClient: HttpClient) { }\n\n  listCompanies(): Observable<Array<Company>> {\n    return this.httpClient.get<Array<Company>>\n      (this.API_URL);\n  }\n\n  createCompanies(company: Company) {\n    return this.httpClient.post(this.API_URL, company);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}